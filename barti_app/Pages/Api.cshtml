@page
@model ApiModel
@{
    ViewData["Title"] = "Api";
}
<div class="text-center">
    <h1 class="display-4"><b>Application Programming Interface (API)</b></h1></div>

<p>
<b>Co to jest API</b><br/>
API to akronim oznaczający interfejs programowania aplikacji (ang. Application Programming Interface). Jest to metoda komunikacji pomiędzy składnikami oprogramowania i aplikacjami sieciowymi oraz wymiany danych między oddzielnymi systemami. Integracja API umożliwia rozszerzanie funkcjonalności aplikacji sieciowych poprzez gromadzenie danych ze źródeł zewnętrznych. Ponadto interfejsy API umożliwiają dzielenie dużych systemów na małe usługi, co zapewnia większą elastyczność i przyspiesza proces tworzenia oprogramowania.<br/>
<br/>
<b>Zasada działania API</b><br/>
Zasada działania jest zasadniczo prosta. Aplikacja serwerowa nasłuchuje i czeka na wszelkie żądania (ang. requests) wysyłane przez swoich klientów. W momencie otrzymania konkretnego żądania obsługuje je, wykonując odpowiednią akcję. Na przykładzie naszej aplikacji do zarządzania budżetem domowym: gdy logujesz się do aplikacji, a następnie dodajesz nowy wydatek, strona internetowa wysyła żądanie do aplikacji serwerowej, aby zapisała podany wydatek do bazy danych. Gdy tylko chcesz odczytać istniejące wydatki, strona internetowa wysyła do serwera żądanie o pobranie Twoich wydatków z bazy danych, a następnie przesłanie ich.  
<br/>
Aplikacja serwerowa posiada unikalny adres w sieci, dzięki czemu każdy klient wie dokładnie, gdzie należy wysłać żądanie. Dodatkowo każda możliwa operacja jak dodanie wydatku, edycja itd jest ściśle określona przez aplikację serwerową. Aplikacja definiuje jakie akcje może wykonać, jakie dane przyjmuje oraz jakie dane zwraca.<br/>
<br/>
<b>Podsumowując cykl pracy z API możemy określić następująco:</b><br/>
<b>1.</b> Klient preparuje zapytanie w postaci odpowiedniego adresu (endpoint);</br>
<b>2.</b> Klient wysyła przygotowane zapytanie (request);</br>
<b>3.</b> System otrzymuje zapytanie klienta i przygotowuje odpowiedź (response);</br>
<b>4.</b> System zwraca odpowiedź na zapytanie klienta;</br>
<b>5.</b> Klient otrzymuje i przetwarza odpowiedź.</br>
<br/>
<b>Metody HTTP</b><br/>
<b>GET</b> metoda GET służy do pobierania danych. Przykładowe zapytanie może wyglądać następująco: http://your_api.com/api/resource?page_number=1. Metoda GET zoptymalizowana jest pod względem pobierania danych, dlatego pozwala przesyłać do serwera parametry filtrowania w postaci ‘queryparameters’. Są to parametry na zasadzie klucz wartość - parameter_name=value, które możesz przesłać w zapytaniu. Wyobraź sobie przypadek, w którym chciałbyś/chciałabyś pobrać z serwera listę wydatków z wybranego dnia. Aby to zrealizować, musisz przesłać do serwera odpowiednie żądanie, w którym określisz jaki zasób chcesz pobrać oraz podasz wybraną datę. Przykładowe zapytanie mogłoby wyglądać następująco: http://your_api.com/api/expenses?expense_date=your_date;</br>
<b>POST</b> metoda POST służy do tworzenia i wysyłania danych. Możesz ją wykorzystać w przypadku np. Gdy chcesz stworzyć nowy wydatek w systemie. Metoda POST zawiera ciało (tzw. Body), które jest niczym innym jak pojemnikiem na dane, które wysyłasz;</br>
<b>PUT</b> metoda PUT służy do modyfikacji istniejących zasobów. Każde zapytanie musi jasno wskazywać jaki konkretny zasób chcemy zmodyfikować. Przykładowe żądanie mogłoby wyglądać następująco: http://your_api.com/api/expenses/id_zasobu. Body: dane, jakie chcemy wysłać. Np. w formacie JSON;</br>
<b>DELETE</b> metoda DELETE służy do usuwania istniejących zasobów. Każde zapytanie musi jasno wskazywać jaki konkretny zasób chcemy usunąć. Przykładowe żądanie mogłoby wyglądać następująco: http://your_api.com/api/expenses/id_zasob.</br>
<br/>
<b>Materiały dodatkowe:</b><br/>
<a href="https://www.ibm.com/topics/api">What is an Application Programming Interface (API)? | IBM</a>.<br/>
<a href="https://www.youtube.com/watch?v=iFMLyMgCUTs&list=PLM-7VG-sgbtBBnWb2Jc5kufgtWYEmiMAw">Intro to APIs Part 1: What is an API?</a>.<br/>
<a href="https://www.youtube.com/watch?v=_7rT-ixivWU">What is a Web API? - YouTube</a>.<br/>
<a href="https://www.youtube.com/watch?v=s7wmiS2mSXY">What is an API? - YouTube</a>.<br/>
<br/>
<br/>
<b>REST - Representational State Transfer</b> - styl architektury oprogramowania, opierający się o zbiór wcześniej określonych reguł opisujących jak definiowane są zasoby, a także umożliwiających dostęp do nich. Został on zaprezentowany przez Roya Fieldinga w 2000 roku.</br>
</br>
<b>Zasady REST</b></br>
Aby API można nazwać RESTful lub API RESTowym musi ono spełniać kilka założeń:</br>
<b>1.</b> Odseparowanie interfejsu użytkownika od operacji na serwerze. Klient poprzez „wydawanie poleceń” nie ma wpływu na to co się dzieje po stronie serwera. Działa to również w drugą stronę – serwer daje klientowi jedynie odpowiedź i nie ma prawa ingerować w UI. Pozwala to na korzystanie z jednego REST API w wielu niezależnych od siebie aplikacjach, a dane pozostaną spójne.</br>
<b>2.</b> Bezstanowość - mówi się że REST jest stateless - oznacza to, że każde zapytanie od klienta musi zawierać komplet informacji oraz, że serwer nie przechowuje stanu o sesji użytkownika po swojej stronie. W REST nie istnieją takie pojęcia jak chociażby stany czy sesje.</br>
<b>3.</b> Cacheability - odpowiedź, którą użytkownik otrzyma z REST API musi jasno definiować, czy ma ona być cacheable czy non-cacheable. Ma to znaczenie przy danych, które bardzo szybko stają się nieaktualne oraz przy danych, które aktualizują się relatywnie rzadko - nie ma sensu na przykład cache’ować współrzędnych geograficznych pędzącego samolotu, natomiast już jego kolor czy nazwę już tak.</br>
<b>4.</b> Endpointy, czyli adresy zasobów, powinny jednoznacznie wskazywać do jakiego zasobu się odwołują. Z ich budowy powinniśmy wiedzieć jaki konkretnie zasób otrzymamy. Co ważne – dane otrzymywane w API powinny być niezależne w żaden sposób od schematu bazy danych w jakiej są przetrzymywane. Oczywiście nie ma przeciwwskazań, aby struktura danych wyglądała identycznie jak schemat bazy danych - niemniej jednak struktura w żaden sposób nie powinna zależeć od tego schematu.</br>
<b>5.</b> Separacja warstw - powinniśmy oddzielić warstwy dostępu do danych, logiki biznesowej oraz prezentacji. Żadna z warstw nie powinna bezpośrednio oddziaływać na inne warstwy. Użycie (implementacja) pośrednich i zewnętrznych API powinny być ukryte. Przykładem może być wcześniej wspomniany samolot. Dla przykładu, informacja o kolorze może pochodzić z zupełnie innego API - klient nie musi o tym wiedzieć.</br>
<b>6.</b> Możliwość udostępniania adapterów i skryptów użytkownikom. Jest to opcjonalna reguła, aczkolwiek zdecydowanie warto rozważyć jej zastosowanie. Jeśli wiemy, że klienci będą wykonywać konkretne operacje na konkretnych danych możemy im udostępnić gotowe do tego rozwiązania.</br>
<br/>
<b>Materiały dodatkowe:</b><br/>
<a href="https://www.ibm.com/topics/rest-apis">What is a REST API? IBM</a>.<br/>
<a href="https://www.redhat.com/en/topics/api/what-is-a-rest-api">What is a REST API? (redhat.com)</a>.<br/>
<a href="https://www.youtube.com/watch?v=lsMQRaeKNDk">Co to jest REST API? - YouTube </a>.<br/>
<a href="https://www.youtube.com/watch?v=-mN3VyJuCjM">What Is REST API? Examples And How To Use It - YouTube </a>.<br/>
<br/>
<br/>
<b>Co to jest Postman? </b><br/>
W prostych słowach, Postman jest aplikacją komputerową używaną do testowania API. Postman wysyła żądanie API do serwera internetowego i odbiera odpowiedź, niezależnie od tego, jaka ona jest. Podczas wysyłania i odbierania żądań w Postmanie nie jest wymagana żadna dodatkowa praca ani ustawianie ram. Szeroko stosowany przez testerów i programistów do lepszego testowania aplikacji. Łatwy do zintegrowania z Twoim potokiem ciągłej integracji (CI) i ciągłego rozwoju.<br/>
<br/>
<b>Co sprawia, że Postman jest przydatny?</b><br/>
Postman ze swoją liczbą funkcji i łatwością pracy był używany przez miliony testerów. Korzystając z jego prostego i przyjaznego interfejsu, możesz łatwo wysyłać żądania, wystarczy wypełnić wymagane dane, wybrać metodę HTTP i nacisnąć przycisk "Wyślij". Inną szeroko stosowaną funkcją jest Automation, która pozwala na tworzenie testów i pisanie zestawów testowych.<br/>
<br/>
Choć jest darmowy, Postman oferuje płatną wersję z funkcjami pro, takimi jak dostęp wielu użytkowników, kontrola nad rolami, dostęp, uwierzytelnianie SSO itp. Umożliwienie użytkownikom skonfigurowania wymaganego środowiska, napisania specyfikacji i wreszcie monitorowania każdego kroku, to wszystko sprawia, że Postman jest idealnym narzędziem do testowania.<br/>
<br/>
<b>Materiały dodatkowe:</b><br/>
<a href="https://www.youtube.com/watch?v=YKalL1rVDOE&list=PLM-7VG-sgbtBsenu0CM-UF3NZj3hQFs7E">New to Postman Part 1: sending a request </a>.<br/>
<a href="https://www.youtube.com/watch?v=pi9MxX0HSHU&list=PLM-7VG-sgbtDD69PEPRQt13DcyN5JUZnS">Writing tests in Postman -- with examples! Part 1 of 2</a>.<br/>
<br/>
</p>

